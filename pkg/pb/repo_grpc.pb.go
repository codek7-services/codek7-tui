// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: pkg/pb/repo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RepoService_CreateUser_FullMethodName         = "/repo.RepoService/CreateUser"
	RepoService_GetUser_FullMethodName            = "/repo.RepoService/GetUser"
	RepoService_UploadVideo_FullMethodName        = "/repo.RepoService/UploadVideo"
	RepoService_GetUserVideos_FullMethodName      = "/repo.RepoService/GetUserVideos"
	RepoService_GetLast3UserVideos_FullMethodName = "/repo.RepoService/GetLast3UserVideos"
	RepoService_GetVideoByID_FullMethodName       = "/repo.RepoService/GetVideoByID"
	RepoService_DownloadVideo_FullMethodName      = "/repo.RepoService/DownloadVideo"
	RepoService_RemoveVideo_FullMethodName        = "/repo.RepoService/RemoveVideo"
)

// RepoServiceClient is the client API for RepoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepoServiceClient interface {
	// User operations
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// Video operations
	UploadVideo(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadVideoRequest, VideoMetadataResponse], error)
	GetUserVideos(ctx context.Context, in *GetUserVideosRequest, opts ...grpc.CallOption) (*VideoListResponse, error)
	GetLast3UserVideos(ctx context.Context, in *GetLast3UserVideosRequest, opts ...grpc.CallOption) (*Video3ListResponse, error)
	GetVideoByID(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*VideoMetadataResponse, error)
	DownloadVideo(ctx context.Context, in *DownloadVideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoFileResponse], error)
	RemoveVideo(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type repoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepoServiceClient(cc grpc.ClientConnInterface) RepoServiceClient {
	return &repoServiceClient{cc}
}

func (c *repoServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, RepoService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, RepoService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) UploadVideo(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadVideoRequest, VideoMetadataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RepoService_ServiceDesc.Streams[0], RepoService_UploadVideo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadVideoRequest, VideoMetadataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RepoService_UploadVideoClient = grpc.ClientStreamingClient[UploadVideoRequest, VideoMetadataResponse]

func (c *repoServiceClient) GetUserVideos(ctx context.Context, in *GetUserVideosRequest, opts ...grpc.CallOption) (*VideoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoListResponse)
	err := c.cc.Invoke(ctx, RepoService_GetUserVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetLast3UserVideos(ctx context.Context, in *GetLast3UserVideosRequest, opts ...grpc.CallOption) (*Video3ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Video3ListResponse)
	err := c.cc.Invoke(ctx, RepoService_GetLast3UserVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetVideoByID(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*VideoMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoMetadataResponse)
	err := c.cc.Invoke(ctx, RepoService_GetVideoByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) DownloadVideo(ctx context.Context, in *DownloadVideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RepoService_ServiceDesc.Streams[1], RepoService_DownloadVideo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadVideoRequest, VideoFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RepoService_DownloadVideoClient = grpc.ServerStreamingClient[VideoFileResponse]

func (c *repoServiceClient) RemoveVideo(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RepoService_RemoveVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepoServiceServer is the server API for RepoService service.
// All implementations must embed UnimplementedRepoServiceServer
// for forward compatibility.
type RepoServiceServer interface {
	// User operations
	CreateUser(context.Context, *CreateUserRequest) (*UserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	// Video operations
	UploadVideo(grpc.ClientStreamingServer[UploadVideoRequest, VideoMetadataResponse]) error
	GetUserVideos(context.Context, *GetUserVideosRequest) (*VideoListResponse, error)
	GetLast3UserVideos(context.Context, *GetLast3UserVideosRequest) (*Video3ListResponse, error)
	GetVideoByID(context.Context, *GetVideoRequest) (*VideoMetadataResponse, error)
	DownloadVideo(*DownloadVideoRequest, grpc.ServerStreamingServer[VideoFileResponse]) error
	RemoveVideo(context.Context, *GetVideoRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRepoServiceServer()
}

// UnimplementedRepoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRepoServiceServer struct{}

func (UnimplementedRepoServiceServer) CreateUser(context.Context, *CreateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedRepoServiceServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRepoServiceServer) UploadVideo(grpc.ClientStreamingServer[UploadVideoRequest, VideoMetadataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}
func (UnimplementedRepoServiceServer) GetUserVideos(context.Context, *GetUserVideosRequest) (*VideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVideos not implemented")
}
func (UnimplementedRepoServiceServer) GetLast3UserVideos(context.Context, *GetLast3UserVideosRequest) (*Video3ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLast3UserVideos not implemented")
}
func (UnimplementedRepoServiceServer) GetVideoByID(context.Context, *GetVideoRequest) (*VideoMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoByID not implemented")
}
func (UnimplementedRepoServiceServer) DownloadVideo(*DownloadVideoRequest, grpc.ServerStreamingServer[VideoFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadVideo not implemented")
}
func (UnimplementedRepoServiceServer) RemoveVideo(context.Context, *GetVideoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVideo not implemented")
}
func (UnimplementedRepoServiceServer) mustEmbedUnimplementedRepoServiceServer() {}
func (UnimplementedRepoServiceServer) testEmbeddedByValue()                     {}

// UnsafeRepoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepoServiceServer will
// result in compilation errors.
type UnsafeRepoServiceServer interface {
	mustEmbedUnimplementedRepoServiceServer()
}

func RegisterRepoServiceServer(s grpc.ServiceRegistrar, srv RepoServiceServer) {
	// If the following call pancis, it indicates UnimplementedRepoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RepoService_ServiceDesc, srv)
}

func _RepoService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_UploadVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RepoServiceServer).UploadVideo(&grpc.GenericServerStream[UploadVideoRequest, VideoMetadataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RepoService_UploadVideoServer = grpc.ClientStreamingServer[UploadVideoRequest, VideoMetadataResponse]

func _RepoService_GetUserVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetUserVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_GetUserVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetUserVideos(ctx, req.(*GetUserVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetLast3UserVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLast3UserVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetLast3UserVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_GetLast3UserVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetLast3UserVideos(ctx, req.(*GetLast3UserVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetVideoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetVideoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_GetVideoByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetVideoByID(ctx, req.(*GetVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_DownloadVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadVideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepoServiceServer).DownloadVideo(m, &grpc.GenericServerStream[DownloadVideoRequest, VideoFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RepoService_DownloadVideoServer = grpc.ServerStreamingServer[VideoFileResponse]

func _RepoService_RemoveVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).RemoveVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_RemoveVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).RemoveVideo(ctx, req.(*GetVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepoService_ServiceDesc is the grpc.ServiceDesc for RepoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repo.RepoService",
	HandlerType: (*RepoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _RepoService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _RepoService_GetUser_Handler,
		},
		{
			MethodName: "GetUserVideos",
			Handler:    _RepoService_GetUserVideos_Handler,
		},
		{
			MethodName: "GetLast3UserVideos",
			Handler:    _RepoService_GetLast3UserVideos_Handler,
		},
		{
			MethodName: "GetVideoByID",
			Handler:    _RepoService_GetVideoByID_Handler,
		},
		{
			MethodName: "RemoveVideo",
			Handler:    _RepoService_RemoveVideo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadVideo",
			Handler:       _RepoService_UploadVideo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadVideo",
			Handler:       _RepoService_DownloadVideo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/pb/repo.proto",
}
